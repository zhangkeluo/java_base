# IOC和DI
**IOC：Inversion of Control —— 控制反转**

 - **IoC不是一种技术，只是一种思想**，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。**传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试**；有了IoC容器后，把**创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象**，所以**对象与对象之间是松散耦合**，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。

**DI：Dependency Injection —— 依赖注入**

 - 在系统运行中，**动态的向某个对象提供它所需要的其他对象**。这一点是通过DI（依赖注入）来实现的。
 比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。
 那么DI是如何实现的呢？ Java 1.3之后一个重要特征是**反射（reflection）**，它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。

# AOP
**AOP —— Asepct-Orentid-Programming，面向切面编程**

 - 面向切面编程，往往被定义为促使软件系统实现关注点的分离的技术。系统是由许多不同的组件所组成的，每一个组件各负责一块特定功能。除了实现自身核心功能之外，这些组件还经常承担着额外的职责。例如**日志、事务管理和安全**这样的核心服务经常融入到自身具有核心业务逻辑的组件中去。这些系统服务经常被称为**横切关注点**，因为它们会跨越系统的多个组件。
 - AOP就是把与核心业务逻辑无关的代码全部**抽取出来**，放置到某个地方集中管理，然后在具体运行时，再由**容器动态织入这些共有代码**。
 - AOP是基于
![](https://img-blog.csdnimg.cn/20190309214042353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5ncG93ZXIxOTkz,size_16,color_FFFFFF,t_70)
AOP就是使用上图所示的“横切”技术，AOP把软件系统分为两个部分：**核心关注点和横切关注点**。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的**业务逻辑**同对其提供支持的**通用服务**进行分离”。

## AOP相关的术语
 1. **切面**（Aspect）
 就是通用服务的功能实现，如日志切面、权限切面、事务切面等。实际应用中通常是一个存放共有功能实现的普通Java类，之所以能被AOP容器识别成切面，是在配置中指定的。
 2. **通知**（Advice）：
 切面的具体实现。以目标方法为参照点，根据放置的地方不同，可分为前置通知（Before）、后置通知（AfterReturning）、异常通知（AfterThrowing）、最终通知（After）与环绕通知（Around）5种。在实际应用中通常是切面类中的一个方法，具体属于哪类通知，同样是在配置中指定的。
 3. **连接点**（Joinpoint）：就是程序在运行过程中**能够插入切面的地点**。例如，方法调用、异常抛出或字段修改等，但Spring只支持方法级的连接点。
 4. **切入点**（Pointcut）：用于定义**通知应该切入到哪些连接点上**。不同的通知通常需要切入到不同的连接点上，这种精准的匹配是**由切入点的正则表达式来定义的**。
 5. **目标对象**（Target）：就是那些即将切入切面的对象，也就是那些被通知的对象。这些对象中已经只剩下干干净净的核心业务逻辑代码了，所有的共有功能代码等待AOP容器的切入。
 6. **代理对象**（Proxy）：将通知应用到目标对象之后被动态创建的对象。可以简单地理解为，**代理对象的功能等于目标对象的核心业务逻辑功能加上共有功能**。代理对象对于使用者而言是透明的，是程序运行过程中的产物。
 7. **织入**（Weaving）：**将切面应用到目标对象从而创建一个新的代理对象的过程**。这个过程可以发生在编译期、类装载期及运行期，当然不同的发生点有着不同的前提条件。譬如发生在编译期的话，就要求有一个支持这种AOP实现的特殊编译器；发生在类装载期，就要求有一个支持AOP实现的特殊类装载器；只有发生在运行期，则可直接通过Java语言的反射机制与动态代理机制来动态实现。

[Spring AOP原理分析一次看懂](https://blog.csdn.net/yuexianchang/article/details/77018603)
